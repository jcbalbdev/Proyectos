---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
---

<Layout title="Welcome to Astro.">
	<main>
    <header>
      <h1 class="text-3xl text-center">Proyectos con <span class="text-gradient">Javascript Vanilla</span></h1>
      <p class="instructions">
        To do list hecha con <strong>javascript vainilla, tailwind , html y astro</strong> 
        <a href="/">â¬…</a>
      </p>
    </header>

    <div class="bg-white rounded-2xl border-2 p-4">
      <section class="mb-2">
        <h1 class="mb-4 text-lg text-purple-700 font-semibold">Lista de tareas 2023 sin local storage</h1>
        <!-- inicio de form -->
        <form id="new-task-form">
          <!-- escribes la data -->
          <input 
            type="text" 
            name="new-task-input" 
            id="new-task-input" 
            placeholder="Agrega una nota" 
            class="text-slate-700 text-base bg-slate-200 px-6 py-4 mr-2 rounded-2xl placeholder:text-slate-400"/>
          <!-- subes la data -->
          <input 
            type="submit"
            id="new-task-submit" 
            value="+"
            class="px-6 py-4 bg-neutral-300 rounded-2xl text-base text-white hover:bg-neutral-400" />

        </form>
        <!-- fin de form -->
      </section>
      <section class="task-list">
        <h2 class="mb-4 text-lg text-slate-700 font-semibold">Notas</h2>
  
        <div id="tasks">
  
          <!-- <div class="task">
            <div class="content">
              <input 
                type="text" 
                class="text" 
                value="A new task"
                readonly>
            </div>
            <div class="actions">
              <button class="edit">Edit</button>
              <button class="delete">Delete</button>
            </div>
          </div> -->
  
        </div>
      </section>
    </div>

	</main>
</Layout>

<script>
  window.addEventListener('load', () => {
	const form = document.querySelector("#new-task-form");
	const input = document.querySelector("#new-task-input");
	const list_el = document.querySelector("#tasks");

	form.addEventListener('submit', (e) => {
		e.preventDefault();

		const task = input.value;

		const task_el = document.createElement('div');
		task_el.classList.add('task');

		const task_content_el = document.createElement('div');
		task_content_el.classList.add('content');

		task_el.appendChild(task_content_el);

		const task_input_el = document.createElement('input');
		task_input_el.classList.add('text');
		task_input_el.type = 'text';
		task_input_el.value = task;
		task_input_el.setAttribute('readonly', 'readonly');

		task_content_el.appendChild(task_input_el);

		const task_actions_el = document.createElement('div');
		task_actions_el.classList.add('actions');
		
		const task_edit_el = document.createElement('button');
		task_edit_el.classList.add('edit');
		task_edit_el.innerText = 'Edit';

		const task_delete_el = document.createElement('button');
		task_delete_el.classList.add('delete');
		task_delete_el.innerText = 'Delete';

		task_actions_el.appendChild(task_edit_el);
		task_actions_el.appendChild(task_delete_el);

		task_el.appendChild(task_actions_el);

		list_el.appendChild(task_el);

		input.value = '';

		task_edit_el.addEventListener('click', (e) => {
			if (task_edit_el.innerText.toLowerCase() == "edit") {
				task_edit_el.innerText = "Save";
				task_input_el.removeAttribute("readonly");
				task_input_el.focus();
			} else {
				task_edit_el.innerText = "Edit";
				task_input_el.setAttribute("readonly", "readonly");
			}
		});

		task_delete_el.addEventListener('click', (e) => {
			list_el.removeChild(task_el);
		});
	});
});
</script>


<style>
	main {
		margin: auto;
		padding: 1.5rem;
		max-width: 60ch;
	}
	h1 {
		font-size: 3rem;
		font-weight: 800;
		margin: 0;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		line-height: 1.6;
		margin: 1rem 0;
		border: 1px solid rgba(var(--accent), 25%);
		background-color: white;
		padding: 1rem;
		border-radius: 0.4rem;
	}
	.instructions code {
		font-size: 0.875em;
		font-weight: bold;
		background: rgba(var(--accent), 12%);
		color: rgb(var(--accent));
		border-radius: 4px;
		padding: 0.3em 0.45em;
	}
	.instructions strong {
		color: rgb(var(--accent));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 1rem;
		padding: 0;
	}


</style>